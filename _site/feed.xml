<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Tue, 11 Oct 2022 09:10:36 +0800</pubDate>
    <lastBuildDate>Tue, 11 Oct 2022 09:10:36 +0800</lastBuildDate>

    
      <item>
        <title>如何做好代码评审</title>
        <link>http://localhost:4000/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E4%BB%A3%E7%A0%81%E8%AF%84%E5%AE%A1</link>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0800</pubDate>
        <author></author>
        <description>&lt;p&gt;&lt;img src=&quot;/public/images/code_review/code_review.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p align=&quot;right&quot;&gt; “三人行，必有我师焉；择其善者而从之，其不善者而改之” &lt;/p&gt;

  &lt;p align=&quot;right&quot;&gt;《论语》 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;相信任何对技术有追求的工程师都希望提高自己的编码水平，任何团队都希望产品代码能具有统一风格，代码就像是出自同一人之手，降低认知负荷。&lt;/p&gt;

&lt;p&gt;很多团队也都探索过 Code Review 实践，最终却不幸流于形式，虎头蛇尾，造成这种现象的原因是多方面的，团队文化、奖励机制、成本和收益不对等等问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;缺乏 Code Review 文化，没有形成代码评审的统一认知，破窗效应&lt;/li&gt;
  &lt;li&gt;管理者对 Code Review 的关注度不够&lt;/li&gt;
  &lt;li&gt;在评审过程中不知道该关注什么，感受不到 Code Review 带来的收益&lt;/li&gt;
  &lt;li&gt;缺乏 Code Review 最佳实践，导致成本高，在摸索过程中逐渐失去耐心&lt;/li&gt;
  &lt;li&gt;产品业务赶工期，来不及做 Code Review&lt;/li&gt;
  &lt;li&gt;对 Code Review 工具熟悉程度不够&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-为什么代码评审很重要&quot;&gt;1. 为什么代码评审很重要&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;工程师成长的最佳场景&lt;/strong&gt;：工程师之间通过 Code Review 对代码设计、实现、规范相关的讨论和交流，是相互学习和成长的最佳场景。软件工程能力只有从代码实践中学到，坚持高标准 Code Review，是团队工程能力提高的必要条件。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;尽早发现 Bug 和设计中存在的问题&lt;/strong&gt;：问题发现得越早，修复的代价越小， Code Review 就是把问题的发现尽量提前。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;团队知识共享&lt;/strong&gt;：代码入库之后，就从个人的代码变成了团队的代码， Code Review 可以帮助其他开发者了解这些代码的设计思想、实现方式，另外， Code Review 的讨论记录、标题、描述信息可以作为参考文档，帮助他人理解代码、追溯逻辑、查找问题。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;针对某个特定方面提高质量&lt;/strong&gt;：针对比较专业的领域，如安全、性能、UI 等，可以邀请专家进行专项审查，另外，复杂场景和高风险代码，也可以通过团队集思广益、查缺补漏的方式来降低上线风险。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;统一编码风格&lt;/strong&gt;：这也是 Code Review 的常见场景，但最好能通过工具，如 Style 插件/P3C 扫描等配置自动化任务来实现机器审查。进行 Code Review ，最好不要过度消耗在风格的检查上。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;引导开发者编程心态&lt;/strong&gt;：如果在编程过程中就知道一定会有同事将检查你的代码，那么你编程心态就会完全不同，会自然而然的更加注重代码质量。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-把-code-review-作为一种制度&quot;&gt;2. &lt;strong&gt;把 Code Review 作为一种制度&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;21-发布流水线上配置卡点&quot;&gt;2.1 发布流水线上配置卡点&lt;/h2&gt;
&lt;p&gt;在发布流程中，设置 Code Review 卡点， CR 不通过不允许发布&lt;/p&gt;

&lt;h2 id=&quot;22-代码入库前强制评审&quot;&gt;2.2 代码入库前强制评审&lt;/h2&gt;
&lt;p&gt;如果代码仓库并不利用发布平台进行发布后入库，同时也希望能开发代码入库前的 Code Review 检查，可以在代码平台上开启开关来进行强制入库检查。之后可以通过在本地客户端发起代码评审，可以保证任何 Commit 在入库之前都经过了评审。这种方式可以像提交一个普通分支一样提交评审。&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HEAD:refs/for/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;分支名&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;feat: add xxx config&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reviewer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-形成-code-review-文化&quot;&gt;3. 形成 Code Review 文化&lt;/h1&gt;
&lt;p&gt;把 Code Review 作为上线发布流程或者代码入库的卡点并不代表 Code Review 这件事就可以执行的很好。如果仅仅只是当作一个流程制度，那么就可能会流于形式，最终结果就是看起来做了 Code Review ，但没有人认真审查，随便看下就通过了，或者发现问题也不愿意修改。&lt;/p&gt;

&lt;p&gt;要想把 Code Review 这件事做好，必须让 Code Review 变成团队的一种文化，开发人员从心底接受这件事，并认真执行，否则如果只有部分同学认同容易形成破窗效应，久而久之，Code Review 就无法真正执行下去，下列这些方面可以参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;开发人员认识到 Code Review 这件事为自己、为团队带来的好处，形成统一的共识比强制执行要事半功倍&lt;/li&gt;
  &lt;li&gt;充分发挥技术带头人和架构师的带头作用，做好表率，榜样的力量很重要&lt;/li&gt;
  &lt;li&gt;对于管理者/架构师/评审人来说，对认真完成 Code Review 的同学以及好的 Code Review 代码实现，不要吝啬自己的赞美，可以通过给 Code Review 点赞和评论等方式给予积极回应&lt;/li&gt;
  &lt;li&gt;把 Code Review 要作为开发任务的一部分，甚至面向 Code Review 编程，一旦面向 Code Review 编程，代码需要经过别人的审核才能入库，你自然而然在意代码质量&lt;/li&gt;
  &lt;li&gt;把 Code Review 当做团队核心的数据资产，也把 Code Review 当做技术人的名片&lt;/li&gt;
  &lt;li&gt;将 Code Review 同步给团队内更多的同学，代码平台支持邮件组通知功能，申请一个公共邮件组，将团队 Leader/架构师等角色组织起来，可以起到很好的监督督促作用&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-提高评审效率和评审质量的实践&quot;&gt;4. 提高评审效率和评审质量的实践&lt;/h1&gt;
&lt;p&gt;Code Review 的执行，很大部分程度上依赖于评审人的认真审查，以及被评审人的积极配合，两者缺一不可。但即使是团队已经初步形成了评审文化，但如果评审的成本过高，也会极大的打击评审人和被评审人的积极性，所以必须对 Code Review 进行行为规范来最大程度的降低 Code Review 时间成本，提升评审人和被评审人的沟通效率。这一章节会介绍不同角色对应的 Code Review 规范。&lt;/p&gt;

&lt;h2 id=&quot;41-作为作者&quot;&gt;4.1 作为作者&lt;/h2&gt;

&lt;h3 id=&quot;411-确保-code-review-只做一件事&quot;&gt;4.1.1 确保 Code Review 只做一件事&lt;/h3&gt;
&lt;p&gt;保持单一职责原则可以有效避免 Code Review 成本过高。一个 Code Review 应该只负责一件事，处理了一个 Feature，解决了一个 Bug，新增一个组件或功能。&lt;/p&gt;

&lt;p&gt;单一职责会让 Code Review 理解成本最小，不要为了省事在一个 Code Review 里掺杂太多其它修改，所以下列行为是不推荐的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在处理需求时觉得的与本需求毫无关联的变量命名写的不好，顺手修改&lt;/li&gt;
  &lt;li&gt;在处理需求时觉得某个与本需求毫无关联的 Method 设计的不优雅，顺手重构&lt;/li&gt;
  &lt;li&gt;在处理需求时发现之前的代码格式不规范，顺手格式化整个文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些行为都是在增加评审成本，应该新起一个独立的 Code Review 来完成，而不是在本次 Code Review 中做。Code Review 的规模和范围并不以代码修改规模来作为唯一评判标准，也要判断该 Code Review 是不是只在做一件事。另外，如果 Code Review 是为了实现代码清理和代码格式化等优化，也不要夹带私货，避免引入 Bugfix 和 Feature。&lt;/p&gt;

&lt;h3 id=&quot;412-发起-code-review-的时机尽量提前开发中小步快跑&quot;&gt;4.1.2 发起 Code Review 的时机：尽量提前，开发中小步快跑&lt;/h3&gt;
&lt;p&gt;避免发起临门一脚的 Code Review，临门一脚指的是快接近发布上线时间才发起的 Code Review，开发代码都是为了发布上线，有一些需求会有发布上线的时间点限制，但发起临门一脚的 Code Review 会显著的将 Code Review 推向流于形式的方向。根据经验，Code Review 越左移，修改代码的成本越低，修改意愿也越高，什么是左移？先了解一下常规的发布上线流水线流程，有两种发起 Code Review 的时机，从 CR 实践落地效果上看，第一种 CR 发起的时机更好&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;时机 1：和 CI 并行的 Code Review 
&lt;img src=&quot;/public/images/code_review/cr01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;时机 2：在上线发布之前发起 Code Review 
&lt;img src=&quot;/public/images/code_review/cr01-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从流水线上来看，许多人会在临近上线时，在靠右的地方快合并主分支的时候才进行 Code Review ，这个时候修改成本就很高，因为代码已经自测/测试通过，如果因为 Code Review 有问题需要重新修改代码，功能本身又要自测或者回归测试，占用更多的时间。而且因为已经临近上线，却因为 Code Review 被打回，开发人员愿意重构代码的意愿也会很低，明明发现问题，又因为上线压力，不打回不符合规范的代码，久而久之大家会失去对 Code Review 的敬畏心理， Code Review 也会慢慢流于形式变成应用发布的过场之一，既无法提高代码质量，降低系统 Bug，也不能提升开发人员的水平，反而降低的开发团队的效率，所以我们要尽量避免在上线之前才发起评审，最好的评审发起时机应该是在开发完毕后立即提交代码评审。但也有一些复杂场景需要反复进行测试和验证，对于这类 Case 也可以在 CI 流程完毕后再发起。&lt;/p&gt;

&lt;h3 id=&quot;413-尽可能提前做好代码自审&quot;&gt;4.1.3 尽可能提前做好代码自审&lt;/h3&gt;

&lt;p&gt;在提交Code Review之前可以借助工具进行一次查缺补漏，避免将低级错误和不完善的代码展现给评审人。例如借助代码平台的新建评审页面展示提交内容，查缺补漏。&lt;/p&gt;

&lt;h3 id=&quot;414-编写语义明确的标题&quot;&gt;4.1.4 编写语义明确的标题&lt;/h3&gt;
&lt;p&gt;不论是 Code Review详情页，还是列表页面，标题都是评审者最先接触到的信息。&lt;/p&gt;

&lt;p&gt;如下图，从评审列表无法判断 Code Review 所完成的事项，是否是在处理 Feature 还是 Bug，也无法判断紧急程度和优先级。&lt;/p&gt;

&lt;p&gt;推荐使用如下格式来规范标题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;修复线上 bug&lt;/strong&gt;：fix(模块)：标题&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;修复线上紧急 bug&lt;/strong&gt;：紧急 fix(模块)：标题&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;上线新的 feature&lt;/strong&gt;：feature(模块)：标题也有团队使用 feat 来表示 feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;模块可以是每个平台约定俗成的模块，比如代码平台的模块包括：Code Search、 Code Review 、Issues、Wiki 等，从评审列表就可以获知大部分信息，当前 Code Review 在解决什么模块的什么问题，也可以根据前缀大概判断紧急程度。规范之后从列表对 Code Review 的意图一目了然，Code Review 也是团队的重要数据资产，通过规范的标题可以对模块的发展脉络进行方便检索。&lt;/p&gt;

&lt;h3 id=&quot;415-编写详细的描述&quot;&gt;4.1.5 编写详细的描述&lt;/h3&gt;
&lt;p&gt;Code Review 的描述也是最重要的信息输入之一，是 Code Review 发起人和代码评审人之间的对话，发起人有义务将自己的编码逻辑、修改范围、可能影响介绍给评审人。评审人在阅读代码之前就了解你的背景和思路，比阅读代码过程中再逐步领悟效率要高得多。评审人也有权利拒绝评审无任何描述信息的 Code Review。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;详细的描述信息能大大降低评审人对你的代码编写逻辑理解成本&lt;/li&gt;
  &lt;li&gt;在编辑描述信息的同时也可以对自己的代码逻辑做进一步的梳理，查缺补漏&lt;/li&gt;
  &lt;li&gt;描述信息也是在代码发布上线后追溯代码修改逻辑的一种重要手段&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;描述部分建议提供以下信息：&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;背景：本次修改的原因是什么&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;思路和改动点：大概的思路是什么，改动了哪些方面可能造成的影响介绍一下&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;416-开发过程中的code-review可以使用-wip-前缀来标注&quot;&gt;4.1.6 开发过程中的Code Review可以使用 WIP 前缀来标注&lt;/h3&gt;
&lt;p&gt;WIP：work in progress&lt;br /&gt;评审人在注意到 WIP 开头的 Code Review  时可以暂时忽略&lt;/p&gt;

&lt;p&gt;我们并不能保证每次评审发起后都是一个完整功能或者 fix，例如在发起评审后突然意识到有设计缺陷，或者意识到提交的代码缺少了 UT 覆盖等问题，评审人在不知情的情况下可能随时对你的代码进行评审，为了避免评审人将时间浪费在还未完成开发的 Code Review 上，创建人有义务将标题改成 WIP 前缀，Code 平台会限制这种 Code Review  的合并行为，评审人可以忽略这种评审。&lt;/p&gt;

&lt;h3 id=&quot;417--解决所有-checklist&quot;&gt;4.1.7  解决所有 CheckList&lt;/h3&gt;
&lt;p&gt;每个评审创建人都要对自己的 Code Review  负责，确保 Code Review 达到最终可合并状态，这里的可合并状态并不是有人通过即可，还包括测试用例的状态，Trybots 的状态，评论的状态。 Code Review  会在突出位置展示当前未完成的任务。&lt;/p&gt;

&lt;p&gt;作者需要确保 Code Review 的 Checklist 全部解决，其中包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确保评审人通过评审&lt;/li&gt;
  &lt;li&gt;解决评论全部解决&lt;/li&gt;
  &lt;li&gt;确保测试卡点任务全部通过&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;418-尊重评审人的评论&quot;&gt;4.1.8 尊重评审人的评论&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;尊重评审人的劳动&lt;/strong&gt;，针对评审人提出建议或者反馈的评论，请给出适当的回应，虽然  Code Review  平台允许创建人将评论置为已解决，但不进行任何回复是不恰当的。&lt;br /&gt;&lt;strong&gt;保持谦逊&lt;/strong&gt;，任何人的代码都可能有改进的空间，哪怕你是这个领域的专家，提交的代码都有可能出现错误，承认不完美才是专业的表现。&lt;/p&gt;

&lt;h3 id=&quot;419-利用格式化扫描插件来实现风格统一&quot;&gt;4.1.9 利用格式化扫描插件来实现风格统一&lt;/h3&gt;
&lt;p&gt;尽管希望借助Code Review来实现代码仓库的风格统一，但将宝贵的精力用于敦促代码风格统一上是得不偿失的，各团队技术负责人配置自动化扫描插件来完成，例如Eslint、P3C、SpotLess。并配置Aone实验室任务、配置CR卡点等。&lt;/p&gt;

&lt;p&gt;针对 Java 语法就有一些常见的风格扫描插件，例如：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;谷歌的 SpotLess ，&lt;a href=&quot;https://github.com/diffplug/spotless&quot;&gt;SpotLess——让你的代码一尘不染&lt;/a&gt;，这个插件不仅可以扫描代码风格，还能帮助格式化代码&lt;/li&gt;
  &lt;li&gt;P3C 代码规约，&lt;a href=&quot;https://1994.github.io/p3c/&quot;&gt;P3C Java 规约扫描&lt;/a&gt; 在 CR 时可以进行扫描格式化&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;42-作为评审人的最佳实践&quot;&gt;4.2 作为评审人的最佳实践&lt;/h2&gt;

&lt;h3 id=&quot;421-尽快评审&quot;&gt;4.2.1 尽快评审&lt;/h3&gt;
&lt;p&gt;把评审代码作为工作的一部分，和开发者尽快发起评审的原则一样，评审人需要留出足够的时间尽快完成评审。越早发现问题，修改代码的成本越低，修改意愿也越高。如果当前没有时间评审，也要明确告诉评审人会在什么时间点前完成，甚至将评审工作转交给其它同事完成。&lt;/p&gt;

&lt;h3 id=&quot;422-对逻辑和质量进行评审&quot;&gt;4.2.2 对逻辑和质量进行评审&lt;/h3&gt;

&lt;h4 id=&quot;4221-实现逻辑&quot;&gt;4.2.2.1 实现逻辑&lt;/h4&gt;

&lt;p&gt;Code Review 应该着重对业务逻辑进行检查&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;逻辑问题&lt;/strong&gt;：是否有未考虑到全局的设计或现有的某些业务细节，边界条件是否考虑充分等&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;安全问题&lt;/strong&gt;：是否存在安全隐患，例如是否存在 SQL 注入、CSRF、越权等安全漏洞&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;性能问题&lt;/strong&gt;：是否会产生性能上的损害，例如慢 SQL、热点 key、数据倾斜等性能问题&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;线上风险&lt;/strong&gt;：是否会对稳定性产生潜在影响，例如是否产生死锁、死循环、FullGC、OOM 等&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;未知影响&lt;/strong&gt;：是否对体验产生潜在影响，例如某 Feature 的上线会潜在影响了其它功能的表现等&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;测试用例&lt;/strong&gt;：是否有有效的单元测试用例验证逻辑，测试用例的分支覆盖度和代码行覆盖等&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4222-代码质量&quot;&gt;4.2.2.2 代码质量&lt;/h4&gt;
&lt;p&gt;提升代码质量是Code Review的重要目的，Code Review 可以对代码风格、规范、可维护性等进行检查。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;编码规范&lt;/strong&gt;： Code Review 的目的之一是协同，是希望整个团队的代码编写能像出自一人之手&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可读性&lt;/strong&gt;： Code Review  是一个很好的测验代码可读性的手段，避免使用奇淫巧技，避免过度拆分&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可维护性&lt;/strong&gt;：代码的可维护性是由很多因素协同作用的结果，代码的可读性好、简洁、可扩展性好，就会使得代码易维护&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;重复度&lt;/strong&gt;：遵守 Don’t Repeat Yourself 原则，尽量减少重复代码的编写，复用已有的代码&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可测性&lt;/strong&gt;：代码可测试性的好坏，同样可以反应代码质量的好坏，代码的可测试性差难以编写单元测试用例&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但这部分审查不应该作为评审重点，产品或者技术负责人应当选择合适的扫描插件并配置合适的扫描任务来完成扫描和准入。&lt;/p&gt;

&lt;h3 id=&quot;423-针对代码而不是作者&quot;&gt;4.2.3 针对代码，而不是作者&lt;/h3&gt;
&lt;p&gt;Code Review 针对的是代码而非作者，尽量不要指责代码作者的行为和态度，同时也需要能够接受不同的方案，任何问题总有很多不同的方案，你有的只是你个人倾向的方案，但别人的方案可能同样没有问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于需要共同遵守的开发规范和一些设计问题，比如代码规约等一定要指出来给予改进&lt;/li&gt;
  &lt;li&gt;对于最佳实践，可以视情况而定，如果是团队已经认可的统一的最佳实践需要明确指出推动改进&lt;/li&gt;
  &lt;li&gt;对于个人风格偏好，可以适当做出一些妥协，比如有的同学习惯把函数拆分的非常小，有的同学就没有这样的习惯，只要不是影响代码理解，这都只是个人习惯，不要做过多争论&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;424-避免过度追求完美&quot;&gt;4.2.4 避免过度追求完美&lt;/h3&gt;
&lt;p&gt;避免苛求每一行的代码都是完美的，避免以找问题的心态进行 Code Review，要抓住 Code Review 的关注重点反馈，另外，并非一定要找到问题才证明你在认真评审，若针对作者的每一行代码评审，很可能会惹恼到作者，也影响到他们对你的反馈的接受。&lt;/p&gt;

&lt;h3 id=&quot;425-不要吝啬自己的赞美&quot;&gt;4.2.5 不要吝啬自己的赞美&lt;/h3&gt;
&lt;p&gt;毫不吝啬的正向反馈也有助于 Code Review 的实践落地，在日常 CR 中，通常的反馈都是问题或建议，鲜有称赞，但代码评审的目的不应该仅仅是发现错误和问题，还应该鼓励和指导开发人员所完成的出色工作。可以通过分享、点赞等方式等来评价。&lt;/p&gt;

&lt;h3 id=&quot;426-明确评论是否要解决&quot;&gt;4.2.6 明确评论是否要解决&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;评审人在发起评论时需要明确指出该评论是否需要被解决&lt;/strong&gt;，代码平台支持评论标签，支持标注评论是否需要被解决，被标注为不需要解决的纯讨论性评论不会被计入 Check List。对于代码修改建议，需要给出明确的论据或者示例。&lt;/p&gt;

&lt;p&gt;另外可以利用标题的描述对 Review 的评论进行分级，告诉开发者应该如何处理这个评论，例如给评论增加Optional前缀。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[optional]：在评论前面加上一个 [optional] 标记，表示这个代码行的问题可改可不改&lt;/li&gt;
  &lt;li&gt;[optional]：对这个逻辑太复杂的函数进行拆分&lt;/li&gt;
  &lt;li&gt;[optional]：函数的参数太多，建议进行对参数进行封装避免出错&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;427-避免使用反问句来评价&quot;&gt;4.2.7 避免使用反问句来评价&lt;/h3&gt;
&lt;p&gt;避免使用反问句来质疑代码逻辑，通常来说当你 Code Review 代码时保持礼貌和尊重能使开发人员更加清晰，得到更多帮助。也要避免用负面词汇来评价代码。&lt;/p&gt;

&lt;p&gt;🙅🏻‍♀️ 不好的例子: “Catch 异常都不精确的？直接一把抓的？那怎么区分出不同的异常呢？”&lt;/p&gt;

&lt;p&gt;👌 好的例子: “我并没有发现这个并发模块给程序带来了多少帮助，并且还增加了程序的复杂性，因此我认为这段代码最好是用单线程而不是多线程。&lt;/p&gt;

&lt;h1 id=&quot;5-小结&quot;&gt;5. 小结&lt;/h1&gt;
&lt;p&gt;想要推动 Code Review 在团队中更好地实施，很重要的一点便是增强团队成员对 Code Review 的认同感。 如果团队成员不认可 Code Review，即使强制设置了 Code Review 流程，也是形同虚设，反而影响正常开发流程的效率。相反的，如果团队同学都认可“ Code Review 是提升代码质量、提升研发效率的核心手段”，那么团队成员的主观能动性会越来越高，互相学习的氛围越来越浓，帮助别人的同时，也能有效提升自己的代码能力。Code Review 的价值得以最大化，最终实现整体提升研发效率提升。&lt;/p&gt;

&lt;h1 id=&quot;资料引用&quot;&gt;资料引用&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://phauer.com/2018/code-review-guidelines/?spm=ata.21736010.0.0.21977536LqogJB#code-reviews-guidelines-for-the-reviewer&quot;&gt;https://phauer.com/2018/code-review-guidelines/?spm=ata.21736010.0.0.21977536LqogJB#code-reviews-guidelines-for-the-reviewer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Google Code Review 规范：&lt;a href=&quot;https://google.github.io/eng-practices/review/&quot;&gt;https://google.github.io/eng-practices/review/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coolshell.cn/articles/1302.html&quot;&gt;CODE REVIEW中的几个提示&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      </item>
    
      <item>
        <title>如何写好软件设计文档</title>
        <link>http://localhost:4000/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3</link>
        <pubDate>Wed, 21 Oct 2020 00:00:00 +0800</pubDate>
        <author></author>
        <description>&lt;p&gt;&lt;img src=&quot;/public/images/2020-10-21/design-doc.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现代软件工程的全过程，有两个阶段非常关键：一个是 “产品设计”，一个是 “架构设计”。&lt;strong&gt;产品设计由产品经理主导，关注的是 “如何以产品特性来系统化地满足用户需求”&lt;/strong&gt;。&lt;strong&gt;架构设计由架构师主导，关注的是 “业务系统如何系统化地进行分解与交付”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;“设计” 一词非常精妙。无论是 “产品设计”，还是 “架构设计”，其实谈的都是 “需求如何被满足” 这件事情的共识。&lt;/p&gt;

&lt;p&gt;产品经理与架构师是一体两面，对人的能力要求的确会比较像，但是分工不同，关注的维度不同。&lt;strong&gt;产品经理关注的维度，其关键词是：用户需求、技术赋能、商业成功&lt;/strong&gt;。而&lt;strong&gt;架构师关注的维度，其关键词是：用户需求、技术实现、业务迭代&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;本质上所有 “设计文档” 的内容组织逻辑，都应该是相通的。它们的内容大体如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 现状 ：我们在哪里，现状是什么样的？
2. 需求：我们的问题或诉求是什么，要做何改进？
3. 需求满足方式：

    1. 要做成什么样，交付物规格，或者说使用界面（接口）是什么？
    2. 怎么做到？交付物的实现原理。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设计文档要素的关键在于以下几点。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 现状：不要长篇累牍。现状更多的是陈述与我们要做的改变相关的重要事实，侧重于**强调这些事实的存在性和重要性**。
2. 需求：同样不需要长篇累牍。痛点只要够痛，大家都知道，所以**需求陈述是对痛点和改进方向的一次共识确认**。
3. 需求满足方式：要详写，**把我们的设计方案谈清楚**。具体来说，它包括 “交付物规格” 和 “实现原理” 两个方面。
4. 交付物规格，**或者说使用界面，体现的是别人要怎么使用我**。对于 “产品设计”，交付物规格可能是 “产品原型”。对于 “架构设计”，交付物规格可能是 “网络 API 协议” 或者 “包（package）导出的公开类或函数”。
5. 实现原理，谈的是我们是怎么做到的。对于 “产品设计”，它谈的是用户需求对应的 UserStory 设计，也就是业务流具体是怎么完成的。而对于 “架构设计”，它谈的是 UserStory 具体如何被我们的程序逻辑所实现。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;程序 = 数据结构 + 算法&lt;/p&gt;

&lt;p&gt;它是一个很好的指导思想。当我们谈程序实现逻辑时，我们总是从数据结构和算法两个维度去描述它。其中，“数据结构” 可以是内存数据结构，也可以是外存数据结构，还可以是数据库的 “表结构”。“算法” 基于 “数据结构”，它描述的是 UserStory 的具体实现，它可以是 UML 时序图（Sequence Diagram），也可以是伪代码（Pseudo Code）&lt;/p&gt;

&lt;h2 id=&quot;多个设计方案的对比&quot;&gt;多个设计方案的对比&lt;/h2&gt;

&lt;p&gt;一篇设计文档有时候不是只有一个设计方案，而是有多个可能的需求实现方式。在这个时候，通常我们会概要地描述清楚两个设计方案的本质差别，并且从如下这些维度进行对比：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 方案的易实施性与可维护性。
2. 方案的时间复杂度与空间复杂度。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这是因为 “设计” 是软件工程中的头等大事，我们应该在这里 “多浪费点时间”，这样的 “浪费” 最终会得到十倍甚至百倍以上的回报&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;使用界面接口&quot;&gt;使用界面（接口）&lt;/h2&gt;

&lt;p&gt;对于 “模块的详细设计” 来说，规格描述相对简单。因为我们关注的面只是模块本身，而非模块之间的关系。&lt;strong&gt;对于模块本身，我们核心关注点是以下两点：一是接口是否足够简单，是否自然体现业务需求。二是尽可能避免进行接口变更，接口要向前兼容&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于 “系统的概要设计” 来说，我们第一关心的是模块关系，第二关心的才是各个模块的核心接口&lt;/strong&gt;。这些接口能够把系统的关键 UserStory 都串起来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于 UserStory 业务流程的表达来说，UML 时序图通常是更好的表达方式&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;怎么表达模块关系呢？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一个方法是对模块的调用接口进行分类，一个模块对外提供的访问接口无非是：常规 DOM API，即正常的模块功能调用；事件（Event）的发送与监听；插件（Plugin）的注册。&lt;/li&gt;
  &lt;li&gt;另一个表达模块关系的视角，是从架构分解看，我们把系统看作 “一个最小化的核心系统 + 多个彼此正交分解的周边系统”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;需要清楚的是，模块关系图的表达是非常粗糙的，虽然它有助于我们理解系统分解的逻辑。&lt;strong&gt;为了共识的精确，我们仍然需要将各个模块核心的使用界面（接口）表达出来&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;实现原理&quot;&gt;实现原理&lt;/h2&gt;

&lt;p&gt;对于模块的详细设计来说，需要先交代清楚 “数据结构” 是什么样的，然后再将一个个 UserStory 的业务流程讲清楚。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于系统的概要设计来说，核心是交代清楚不同模块的配合关系&lt;/strong&gt;，所以无需交代数据结构，只需要把一个个 UserStory 的业务流程讲清楚。&lt;/p&gt;

&lt;p&gt;无论是否要画 UML 时序图，在表达上伪代码（Pseudo Code）的设计都是必需的。&lt;strong&gt;伪代码的表达方式及语义需要在团队内形成默契&lt;/strong&gt;。这种伪代码的语义表达必须是精确的。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;请求&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;返回&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以使用 API 来表达&lt;/p&gt;

&lt;h2 id=&quot;qa&quot;&gt;Qa&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;彼此正交就是相互没有直接联系，就算有相互作用也是通过核心系统的接口进行。这里面难点是最小单位的核心系统，需要足够通用的接口方法来保证&lt;/strong&gt;。&lt;/p&gt;
</description>
      </item>
    

  </channel>
</rss>
