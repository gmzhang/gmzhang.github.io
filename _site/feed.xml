<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Tue, 11 Oct 2022 09:49:55 +0800</pubDate>
    <lastBuildDate>Tue, 11 Oct 2022 09:49:55 +0800</lastBuildDate>

    
      <item>
        <title>如何预防和管理技术风险</title>
        <link>http://localhost:4000/%E5%A6%82%E4%BD%95%E9%A2%84%E9%98%B2%E5%92%8C%E7%AE%A1%E7%90%86%E6%8A%80%E6%9C%AF%E9%A3%8E%E9%99%A9</link>
        <pubDate>Mon, 21 Jun 2021 00:00:00 +0800</pubDate>
        <author></author>
        <description>&lt;p&gt;&lt;img src=&quot;/public/images/tech_risk/00.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p align=&quot;right&quot;&gt; “...见微以知萌，见端以知末，故见象箸而怖，知天下不足也。” &lt;/p&gt;

  &lt;p align=&quot;right&quot;&gt; 《韩非子》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一切线上问题的发生都是有代价的，包括可衡量的直接商业损失，也包括不可衡量的用户或合作方口碑、社会舆情风险、乃至国家监管要求。与普通研发者不同的是，做好技术风险管理需要管理者从技术本身造成的系统风险的视角，延伸至业务影响因素来综合考量，用合理的成本、有效的方法保障业务的连续性。&lt;/p&gt;

&lt;h1 id=&quot;一掌握全貌坚守底线&quot;&gt;一、掌握全貌，坚守底线&lt;/h1&gt;
&lt;p&gt;要做好技术风险管理，管理者必需先掌握技术风险的全貌，而要了解全貌就必需建立风险的明确分级、标准化的管理、以及统一分析度量。&lt;/p&gt;

&lt;h3 id=&quot;建立明确的风险定级标准与标准化风险管理流程&quot;&gt;&lt;strong&gt;建立明确的风险定级标准，与标准化风险管理流程&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;首先需要梳理业务视角的风险等级标准，清晰定义在各场景下的风险应对策略。一般建议在一个业务内统一定义，在跨业务中遵循就高原则，以保障实际运行时针对上下游的业务间对风险分级的标准能够自适应的不断对齐，这样有助于后续标准化管理和流程跑的更加顺畅。级别的定义除了从系统功能影响程度评价，也应综合考量业务影响因素，对高敏感、高风险业务进行适当提高定级标准。&lt;/p&gt;

&lt;p&gt;围绕风险分级标准，就可以建立配套的预防、应急、定责问责等管理流程和制度。如：针对高等级风险，要求必要的防控能力、应急响应时效、各级干系人参与标准，以及更详尽的事件复盘及事后责任评估等。在这些标准化流程约束和执行要求下，能够很快的将风险日常管理在团队内建立起来。&lt;/p&gt;

&lt;h3 id=&quot;建立统一且持续的度量策略关注定期深度分析及持续改进&quot;&gt;&lt;strong&gt;建立统一且持续的度量策略，关注定期深度分析及持续改进&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在风险管理标准化后，就能对其进行统一度量及固定频率的周期性分析。一般建议根据历史分析、或接下来的软件工程重点，针对性设计标准统一，且持续一定时长的度量策略。这样的度量策略，能够帮助管理者的前置设定目标、并可进行横纵对比，更好的了解风险全貌、评价风险防控工作成果、识别关键突破点。同时要针对多发共性问题、重点风险设定可横向推进的改进策略，保证整体风险管理是从定义管理，到改进预防，人员意识和系统防控能力都是螺旋上升的。&lt;/p&gt;

&lt;p&gt;效率和稳定性常常需要平衡，技术风险防控也需要考虑投入产出。在阿里过去技术风险的规则上，采用了“漏斗”式的分层过滤机制：“鼓励建设 -&amp;gt; 规范运行 -&amp;gt; 警示风险 -&amp;gt; 问责结果”，帮助各研发团队建立逐层风险防御要求，同时可在不同层次投入不同的资源。&lt;/p&gt;

&lt;h3 id=&quot;鼓励更前置的建设投入预防为主防微杜渐&quot;&gt;&lt;strong&gt;鼓励更前置的建设投入，预防为主，防微杜渐&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;更前置的投入风险防控建设往往需要投入的资源更少，但技术风险上的投入对研发而言往往相对业务交付，更不易衡量产出。这就需要从管理者角度，结合对稳定性过程度量，对前置建设投入给与更多的鼓励。在团队中树立典型标杆，以帮助团队中在技术风险相关的优秀工程实践能够被看见，从而能够引导研发在软件研发的前期就更多思考“面向失败的设计”。&lt;/p&gt;

&lt;h3 id=&quot;低风险重在治理高风险明确底线&quot;&gt;&lt;strong&gt;低风险重在治理，高风险明确底线&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;风险一定会发生，在技术风险管理实施过程中，管理者不应过度关注责任，而应将管理重点放到对风险改进的要求上。过度的责任意识，容易使风险管理的执行扭曲变形，导致风险信息的失真，这可能导致更大的风险被隐藏。在技术风险管理策略上，我们针对单次低等级风险事件，建议将重点放在预防、发现、恢复能力的要求上，同时应回归自身，从自身业务风险出发，不断提升上下游能力水位。&lt;/p&gt;

&lt;p&gt;虽然不应过度关注责任，但仍然需要设定底线要求，来帮助尽可能规避不可接受的问题发生，这是风险过滤的最后一道防线。底线要求可以考虑两方面，一是人员意识不足，二是灾难性结果。对意识的要求，可以放在频率最高且风险最高的流程节点，如技术风险针对性设定“变更红线” 来规避意识问题，且这类底线设定需要根据实际水位进行定期调优，以满足持续性和适应性。对灾难性结果，底线设定的要点则是提前声明哪些技术风险影响是不可接受的，如：大额资金损失、严重舆情及品牌风险、国家监管导致的业务关停风险等。&lt;/p&gt;

&lt;h1 id=&quot;二从人的经验不断抽象演进为系统能力&quot;&gt;二、从“人”的经验不断抽象，演进为“系统能力”&lt;/h1&gt;

&lt;p&gt;人是流动的，依靠制度与流程约束达到持续有效的结果是不现实的。这需要管理者在日常就将对人的技术风险管理实践，逐步转移到系统能力建设要求上来。&lt;/p&gt;

&lt;h3 id=&quot;必要的基础运维流程规范的系统化&quot;&gt;&lt;strong&gt;必要的基础运维流程、规范的系统化&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;基于技术风险规范管理者可以引导团队逐步建立基础运维流程的系统化管理能力。如：业务监控部署、变更灰度过程管控、预案覆盖及保鲜、常态化攻防演练等都是可标准实施的基础运维动作，将这些基础运维流程通过系统化管理，可以更好的保障技术风险相关工作的延续性、有效性。&lt;/p&gt;

&lt;h3 id=&quot;建立高可用容灾能力自动化白屏化的运维能力&quot;&gt;&lt;strong&gt;建立高可用容灾能力，自动化、白屏化的运维能力&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;为了避免容易产生误差的手工操作，应尽可能地将标准化运维工作自动化、白屏化。这既能降低因人员交替带来的经验差，也能帮助在故障处理中实现更快速的处置恢复。同时在系统设计中，需要提前考虑避免单点的容灾、容错等机制，这些都需要技术管理者在团队要求上予以明确。&lt;/p&gt;

&lt;h1 id=&quot;三技术风险度量实践参考&quot;&gt;三、技术风险度量实践参考&lt;/h1&gt;
&lt;p&gt;借助标准化的风险管理流程、周期数据分析，往往最先也最易建立结果度量，而易衍生为管理工具。但度量的目标应该是帮助管理者了解现状、引导团队改进，并根据自身发展阶段设计模式，逐步建立过程改进与结果达成的相关性。下面简单介绍，阿里安全生产如何通过度量模式设计引导改进与能力提升，供大家参考。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/tech_risk/tech_risk01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 结果度量&lt;/strong&gt;：通过目标牵引、统一度量、分解引导三步，使度量更综合，结果更宏观，并具备对比性和引导性。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;目标牵引&lt;/strong&gt;：相对单一问题管理者应更关注总体趋势，这一要求上至 CTO 下至末级团队 TL 应有一致认知。通过一致性的目标定义，可以帮助管理者更好的关注到全局状况和趋势变化。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;统一度量&lt;/strong&gt;：对结果的度量往往有较多指标，如：故障数、E 级故障数、MTTR、客诉量、资损金额等等，诸多因素使得从横向管理角度很难了解整体趋势。为解决这一问题，我们建立了评价单个故障综合状况的统计算式：故障分，通过这一算式综合评价单个故障。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;分解引导&lt;/strong&gt;：有了单个故障综合评价的统计值，再结合单例故障分对团队的分解策略，可起到引导团队改进的效果。如上图所示的分解模式，就定义了对发现和恢复能力建设方面，较原因因素（或通常意义上的责任因素）有更高的要求。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. 过程度量&lt;/strong&gt;：关于建立过程度量的要点，我总结为全面丰富的指标、结合工具的改进能力、灵活选择治理重点。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;全面丰富指标&lt;/strong&gt;：根据面向工具、研发者调研，我们发现各 BU 均有自己策略来推动过程建设，这是非常棒的最佳实践，如能横向借鉴将有更好的效果。因此我们建立了，围绕研发运维生命周期中风险治理要求的可拓展的指标框架，并提出“指标市场”概念，“市场”意味着开放接纳与竞争择优。通过“指标市场”的长期建设，能帮助管理者选择更优的指标来推进改进。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;结合工具改进&lt;/strong&gt;：对于指标的基础要求是数据必须是可通过工具系统采集的，其背后的目的是度量的结果是应是可以结合工具进行改进的，这也搭建起了工具使用者与维护者的关联，帮助工具面向风险治理可以不断完善。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;灵活选择重点&lt;/strong&gt;：相较结果度量，过程度量应具备更多的灵活性，来帮助团队发挥自身能动性。选择符合自身场景的指标并应用于改进。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. 建立二者的联系&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最好的结果，是能够逐步建立起两个维度的度量强关联，以保障过程建设与结果的达成直接关联。事实上我们也正朝着这个方向逐步演进，如下的形式已经逐步开始建立链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/tech_risk/tech_risk02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;小结&quot;&gt;小结&lt;/h1&gt;
&lt;p&gt;在技术风险预防及管理角度，与研发者不同的是技术管理者应该有更加横向的视角，这体现在掌握全局风险、建立标准管理流程、鼓励前置建设、明确底线要求，同时不断促进经验转化的系统能力建设的管理策略中。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;技术管理者应帮助团队关注到技术风险带来的业务影响的综合评估；&lt;/li&gt;
  &lt;li&gt;技术管理者应要求团队建立标准且统一的风险管理策略，尽可能掌握风险的全貌。结合持续度量与分析了解风险变化趋势，识别关键改进点，持续跟踪闭环；&lt;/li&gt;
  &lt;li&gt;在团队中更多鼓励前置的建设，以最低成本获取最佳的风险规避结果。同时明确底线要求，不断强化来规避不可接受结果的发生；&lt;/li&gt;
  &lt;li&gt;除了管理策略外，技术管理者更应对“将日常技术风险管理的经验、规则，转化为系统流程、能力”提出明确要求，以规避人因风险，也能在在故障应急时保障更自动、更快速的恢复，进而大大提升系统稳定性；&lt;/li&gt;
  &lt;li&gt;综合以上基础要求，管理者应用好度量实践中建议的度量工具，并根据自身发展阶段设计模式，逐步建立过程改进与结果达成的相关性。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;参考阅读&quot;&gt;参考阅读&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tr.alibaba-inc.com/portal/article/lzozlw/fzg6dy/gsfby8&quot;&gt;《技术风险规范制度框架》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ata.alibaba-inc.com/articles/235146?spm=ata.21736010.0.0.5adc7536Mzfy4q&quot;&gt;《安全生产指南》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/cn/blogs/china/10-lessons-from-10-years-of-aws/&quot;&gt;《AWS CTO 对过去十年的经验总结 – 十条军规》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      </item>
    
      <item>
        <title>如何做好技术管理</title>
        <link>http://localhost:4000/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86</link>
        <pubDate>Sat, 06 Mar 2021 00:00:00 +0800</pubDate>
        <author></author>
        <description>&lt;p&gt;&lt;img src=&quot;/public/images/tech_manage/00.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p align=&quot;right&quot;&gt; &quot;管理即正确的做事，领导力即做正确的事” &lt;/p&gt;

  &lt;p align=&quot;right&quot;&gt; “Management is doing things right; leadership is doing the right things.”&lt;/p&gt;

  &lt;p align=&quot;right&quot;&gt;Peter Drucker, Effective Executives &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;软件工程是典型的现代知识工作。其中的“工程”两个字蕴含软件复杂度的本质挑战。我们讨论的软件，基本上都是在一定规模的组织（从几个人团队到几千人不等）内通过不同层次的协同来实现的。 技术管理者所面对的工程，已经不再是以数量来衡量价值产出的，而是如 Peter Drucker 所说的，是通过做正确的事，正确的做事来达成价值。而这些要求，正是卓越工程要解决的问题。因此技术管理是卓越工程的核心环节。&lt;br /&gt;本节重点在&lt;strong&gt;一线研发团队的技术管理实践&lt;/strong&gt;，不涉及更高层级管理者话题或者组织技术战略制定。&lt;/p&gt;

&lt;h1 id=&quot;技术管理核心是支撑团队高效交付价值&quot;&gt;技术管理核心是支撑团队高效交付价值&lt;/h1&gt;
&lt;p&gt;管理者的核心任务是支撑团队高效的交付价值。对于一个软件研发团队来说，交付的价值效率如何衡量？整个研发组织交付业务价值的过程是一个非常复杂的、包含了组织管理、工程效率（协同、复杂度、分析、维护成本）以及研发生产力的多个方面，且多个因素交织在一起的综合过程。 但是我们可以对于价值的交付效率做一个形式上的分解：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/tech_manage/tech_manage01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从这里可以看到，交付价值的过程，包含了三个相互关联的因素：&lt;/p&gt;

&lt;p&gt;（1）&lt;strong&gt;做正确的事&lt;/strong&gt;：通过制定、传达、分解、分析，让团队目标确保在正确方向上，这可能是最关键的部分。&lt;/p&gt;

&lt;p&gt;（2）&lt;strong&gt;工程的复杂度有多高&lt;/strong&gt;？正确的方向有了以后，完成一个研发项目/需求，需要多大的投入？这个过程涉及到方案的确定，其影响因素与需求自身的复杂度有关，但是也与系统本身的复杂度（历史负担，架构合理性）、完成需求的协同成本（一个团队可完成、需要多个团队？）等都有关系。 &lt;br /&gt;（3）&lt;strong&gt;干活效率如何&lt;/strong&gt;： 方向定了，方案也定了，剩下就是干活了。干活的效率和工程师的能力/成长，工具平台是否好用，研发流程是否合理，工作是否能专注有关。&lt;/p&gt;

&lt;p&gt;而不同程度地帮助团队解决好上面几个方面的问题，这就是一线管理者应当发挥的作用。&lt;/p&gt;

&lt;h1 id=&quot;做好技术管理者---理解技术团队&quot;&gt;做好技术管理者 - 理解技术团队&lt;/h1&gt;
&lt;p&gt;首先我们来定义一线研发团队。 一线研发团队一般是由 IC 研发同学组成的，典型的团队由技术线研发工程师为主，有时有测试或者 PM 的同学支持。&lt;/p&gt;

&lt;p&gt;研发团队是做什么的？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;负责一个产品（或者产品模块）/或者系统/子系统的演进&lt;/strong&gt;（Conway 定律，就算这个团队一开始不是负责某个系统/产品，时间长了系统或者产品也会演变成围绕组织边界划分）&lt;/li&gt;
  &lt;li&gt;因为负责相关的产品/模块/系统，&lt;strong&gt;交付业务所需要的需求、功能、部署和维护&lt;/strong&gt;（可能因为 DevOps / SRE 模型的不同这部分的分工有差异）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/tech_manage/tech_manage02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从研发团队自身的定位，我们很容易看到，一个研发团队为了能够实现自身的职责，&lt;strong&gt;需要如下的角色&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;技术负责人&lt;/strong&gt;：项目落实于产品/技术组件/系统，每个产品/系统需要有技术负责人，具体来说技术负责人职责 后面会单独讨论。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;人员管理&lt;/strong&gt;：招聘、绩效、人员日常的管理、团队协同、资源。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;项目管理者&lt;/strong&gt;：研发活动经常以项目形式组织，需要团队内外的协同，项目的推进需要项目管理者的参与，因此这是另一个团队所需要的角色。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;开发&lt;/strong&gt;：研发团队的开发同学。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/tech_manage/tech_manage03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意角色是会兼任的，如一个人可以同时兼任技术负责人 + 开发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;研发团队的管理者本身是覆盖哪些角色呢&lt;/strong&gt;？由于我们探讨的是管理者本身，因此“人员管理”的角色职责毫无疑问是在范围内的，那么剩下的就是技术负责人/项目管理，按照不同管理者的职责范围，就有了不同的模型。&lt;/p&gt;

&lt;p&gt;理解团队组成和管理者本身的角色定位，是进一步讨论如何支持团队交付价值的基础。&lt;/p&gt;

&lt;h1 id=&quot;技术管理者如何支撑团队交付价值&quot;&gt;技术管理者如何支撑团队交付价值&lt;/h1&gt;
&lt;p&gt;整个技术团队整体，是以高效的交付价值为目标的。而如何高效交付价值，前面也分解了其中的三个关键要素。管理者在其中围绕交付价值的环节，通过支撑团队发挥作用。&lt;/p&gt;

&lt;h2 id=&quot;1-明确目标---做正确的事&quot;&gt;1. 明确目标 - 做正确的事&lt;/h2&gt;
&lt;p&gt;作为一线团队的主管，很多时候团队的定位和目标在大的组织里面是有相对清晰的定位的，这时，关键要确保&lt;strong&gt;信息的通畅&lt;/strong&gt;。之所以要信息通畅，是因为技术工作的重要特点是团队的一线成员会掌握实时的、更加细节的项目信息，通过信息通畅，才能更好的让团队在执行中避免信息偏差。公司目前推进的 OKR，就是为团队管理提供了面向价值、开放透明的工具。&lt;/p&gt;

&lt;p&gt;如果作为技术管理者，在团队中需要寻找和定义目标，那么可以考虑几个原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;明确价值&lt;/strong&gt; - 把&lt;strong&gt;客户价值真正作为最重要的目标&lt;/strong&gt;：客户第一不仅仅是公司的价值观，每个团队在不清楚目标时都值得思考，自己的客户是谁，第一客户是谁。这样的思考也是解决局部利益和全局目标分歧的关键。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;极致务实&lt;/strong&gt;：从目标到每个人应该怎么做，是主管做选择，做什么不做什么的过程。对于一线研发团队，一般不需要涉及复杂的战略取舍，很多时候，就是要求我们做好聚焦，如激光一样聚焦。而取舍，多数时候都是舍的问题。一线的研发团队，&lt;strong&gt;最需要舍的，是那些华而不实、不知道能不能落地、不知道对客户价值有没有用（甚至已经知道没用）的事情。舍弃那些绩效工程、领导工程、放烟花项目、拍脑袋项目&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果说，团队已经有太多的事情了，并没有上面说的这些绩效工程，那还怎么聚焦？有几个简单的判断准则：&lt;/p&gt;

&lt;p&gt;（1）这个事情不做了，对于组织的大目标会有什么影响？ 如果结论是没什么影响，就不必做了。&lt;/p&gt;

&lt;p&gt;（2）如果我的团队，换一个其他的优秀 leader 来带领，他会继续做这个项目吗？如果结论也是不会继续，那我们自己也不用做。&lt;/p&gt;

&lt;p&gt;关于这个问题，各类管理学书籍中探讨比较多，因此后面不再过多展开。这并不是因为这个话题不重要，恰恰相反，做正确的事是技术管理中最重要的话题，只是因为本书无法提供比其他材料更有指导性见解而省略。&lt;/p&gt;

&lt;h2 id=&quot;2-正确的做事---降低工程复杂度和协同成本&quot;&gt;2. 正确的做事 - 降低工程复杂度和协同成本&lt;/h2&gt;

&lt;h3 id=&quot;技术管理者应重视工程质量相关工作支撑团队长期发展&quot;&gt;技术管理者应重视工程质量相关工作，支撑团队长期发展&lt;/h3&gt;
&lt;p&gt;每个技术团队要有技术负责人 tech lead。先说说&lt;strong&gt;什么是技术负责人 tech lead&lt;/strong&gt;。技术负责人负责的不是技术么？是也不是。 负责技术，但是如果没有一个“实在”的东西负责（也就是所谓抓手），其实这个角色就很难发挥作用。 这也是今天很多架构师运转不顺畅的原因，大体上都是没有足够的权责统一。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;技术负责人 tech lead 要负责系统，负责产品&lt;/strong&gt;。 每一个系统/产品，都需要有明确技术负责人。 同时 该系统内部可能还划分几个子系统，可以按照需要设定子系统的技术负责人岗位（当模块/子系统有多于一个工程师参与时）。 子系统技术负责人在技术决策上需要服从上层系统技术决策。&lt;/p&gt;

&lt;p&gt;技术负责人需要承担系统&lt;strong&gt;真正 Owner 的权责，并为结果以及长期演进负责，否则就不是真正的技术负责人&lt;/strong&gt;。大部分的研发团队的管理者本身也兼任团队所负责的系统的技术负责人，但是并不是所有的管理者都有意识的做好了这项工作。当然技术负责人也可以和团队管理者角色分离。今天我们看到不少系统缺乏真正的 Owner，导致很多技术演进问题长期得不到解决，而架构师又难以落地，可以说都是技术负责人角色不清晰导致问题。&lt;/p&gt;

&lt;h3 id=&quot;技术负责人如何发挥作用&quot;&gt;技术负责人如何发挥作用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;具体来说，如何才算是做好了技术负责人的工作&lt;/strong&gt;？首先，针对我们通常意义上的技术工作的贡献，可以定义一个如下的层次模型：&lt;/p&gt;

&lt;p&gt;-（Level 1）写代码（负责具体实现）
-（Level 2）Review 代码，做方案设计（负责方案落地）
-（Level 3）Review 技术方案设计（负责项目/落地）
-（Level 4）建议新方向，把关新方向（负责整个领域的演进和结果）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/tech_manage/tech_manage04.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这四个层次上，一线产品/系统/子系统的技术负责人应该&lt;strong&gt;能够至少覆盖 L2 的工作&lt;/strong&gt;，一线的技术负责人最好还要能够保持 Coding 的工作。而不承担技术负责人的 IC，工作一般会聚焦在 1 和 2 两层上。随着技术负责人自身能力的增长和职责的扩大，会逐渐负责多个子领域，直到负责一个较大的技术领域发展，承担的职责逐渐覆盖到从 L2 到 L3，L4。&lt;/p&gt;

&lt;p&gt;具体如何做 Code Review、代码质量等工程质量相关话题，在本篇后续章节展开。这里关键强调的是，对于技术管理者，&lt;strong&gt;为了团队工程质量/复杂度的降低，必须通过技术负责人的角色长期、坚定的投入&lt;/strong&gt;。对于一线的 TLM 来说，这个技术负责人可以是自己承担，也可以安排团队内最熟悉系统/产品的同学担任，并给予充分的支持让技术负责人真正发挥作用。&lt;/p&gt;

&lt;h3 id=&quot;识别团队内外部协同成本信号积极寻求解决&quot;&gt;识别团队内外部协同成本信号，积极寻求解决&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;安排清晰合理的团队内分工&lt;/strong&gt;。团队内的分工也是个技术架构问题，做好内部的分工，让团队成员可以相互信任和依赖，这是主管的核心职责。&lt;br /&gt;&lt;strong&gt;团队和其他团队边界有冲突时&lt;/strong&gt;，明确边界，解决冲突，是主管应该为团队贡献的工作。同时应该积极&lt;strong&gt;帮助团队解除阻塞&lt;/strong&gt;，通过主动协助团队解决问题或者上升解决&lt;strong&gt;阻塞。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-对团队的成员提供支持和帮助---让团队高效工作&quot;&gt;3. 对团队的成员提供支持和帮助 - 让团队高效工作&lt;/h2&gt;

&lt;h3 id=&quot;如何更好的激励团队成员&quot;&gt;如何更好的激励团队成员&lt;/h3&gt;
&lt;p&gt;建设一个能拿结果，有战斗力的团队，团队的成员一定是非常有动力的在工作的。如何能够达到这个状态？首先要强调是在团队的成员和主管之间&lt;strong&gt;构建信任&lt;/strong&gt;。信任的构建是双向的，在高效的组织中，如果缺乏了任何一个方向的信任，都将带来效率的下滑。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;赢得团队的信任&lt;/strong&gt;：作为主管，要能够诚实沟通、有良好的动机（客户第一、帮助员工成长等而非抢夺地盘甚至搞内部政治）、公平对待成员。这种信任来自于主管&lt;strong&gt;真诚的关注成员的发展&lt;/strong&gt;，而不只是自己阶段性的目标。事实上，做到了这一点的团队，只会更有战斗力，能够达成更好的结果。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;相信团队成员&lt;/strong&gt;：主管相信员工，需要做到的是清晰的沟通目标、相信员工的目的和动机是自我实现和带来影响力、主管要提供清晰的组织边界和团队内的结构，从而让组织成员可以相互依赖而不是相互竞争。&lt;a href=&quot;https://rework.withgoogle.com/blog/five-keys-to-a-successful-google-team/&quot;&gt;Google 内部 180 个团队的研究&lt;/a&gt; 清晰揭示了这些组织因素对于团队效率的影响，而其中最重要的是心理安全（在团队中能够安全的进取并承担风险），这需要主管能够给予员工足够的支撑，从而最大化释放出成员的意愿。组织也因此需要 &lt;a href=&quot;https://topic.atatech.org/articles/156422&quot;&gt;Blameless 的文化&lt;/a&gt;，尤其在涉及到故障、事情进展不如人意的时候，深入根因，Blame-aware 但是对复杂的问题不以简单粗暴惩戒来解决。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;同时，作为背景知识，我们每个人都应当了解工程师是如何被激励的&lt;/strong&gt;。推荐所有主管以及希望成为主管的同学仔细看一下 &lt;a href=&quot;https://www.youtube.com/watch?v=u6XAPnuFjJc&quot;&gt;RSA what motivates us&lt;/a&gt; 视频，研发主管需要理解研发活动的本质驱动力：即自主性（Autonomous）、精通（Mastery）和目标（Purpose）。理解研发活动的本质驱动力，我们可以更好的反思自己的角色定位，更多成为一个视人为人的主管，能够赋能团队，能够让同学能够有驱动力并感受到自身的成长，从而带领团队获得更好的结果。&lt;/p&gt;

&lt;h3 id=&quot;通过高效的互动支持团队&quot;&gt;通过高效的互动支持团队&lt;/h3&gt;
&lt;p&gt;在一些管理学的文章上，会把管理的风格归结为不同的类型，有教练型，有代理型等。但是从实际情况看，这些不是工作当中的真正状态。真正在工作当中，针对不同的 团队成员、或者同一个成员在不同的场景下，需要采取不同的模式。 重要的是 在每一个谈话、会议 和讨论之前，我们需要想清楚一个问题： &lt;strong&gt;今天应该用什么模式&lt;/strong&gt;？这个同学，我是应该以指导为主、支持为主还是可以授权给他？ 要有意识的问自己这些问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;指导和教练 Coaching&lt;/strong&gt;：适用于两种场景，（1）对于团队的新人、比较初级的工程师，需要采用教练的模式，主管应该花更多的时间，针对具体的案例 帮助同学分析、明确目标、明确路径，教会同学未来遇到同样问题时的解决方案。 具体的可以参考 GROW 模型 [1]；（2）团队成员寻求帮助，这时是 Coaching 的好机会，可以不必急于给出答案，而是帮助同学掌握解决问题的方法&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;支持 Support&lt;/strong&gt;：支持和 Coaching 不同，但可能是管理者最经常的模式，帮助团队的成员解决具体的问题，但是又不是代替成员去决策。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;代理授权 Delegation&lt;/strong&gt;：对于团队的有经验的成员，能够对某个模块、系统、方向承担起相应的职责，我们尽量将职责代理给能够承担的同学。代理是把一件事情或者一个方向的决策权交给这个同学。有同学可以被授权负责某些方向是团队逐渐成熟的很重要标志。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;达成共识 Consensus&lt;/strong&gt;：当前的问题，需要经过引导/讨论/脑爆的模式形成共识，可以设计合理的会议流程和话题引导，给大家充分表达机会，形成共识，促进更好的协同行动。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;直接下达命令 Directing&lt;/strong&gt;：总会有一些场景，因为时间紧迫，没有时间讨论形成共识，那么就明确告诉团队决策，大家按照决策执行。但是不管什么情况，管理者不能带给团队一个不敢反馈的氛围，如果因为自己的管理风格问题导致听不到声音是最危险的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的细节有很多管理/领导力的书籍可以参考，这里不展开。 关键在于我们要了解这些模式并有意识的选择和应用。&lt;/p&gt;

&lt;h3 id=&quot;注重效率努力纠正一切低效的行为形式主义&quot;&gt;注重效率，努力纠正一切低效的行为、形式主义&lt;/h3&gt;
&lt;p&gt;低效本身是让有追求的同学斗志很容易被消磨的因素。研发流程的效率（具体点很多，工具，平台，测试环境，应用架构的历史债），很多领域已经是破窗效应明显了，&lt;strong&gt;管理者重点是关注团队在研发流程中的效率，并为此负责&lt;/strong&gt;。&lt;br /&gt;会议效率低下，Top-down 的文化等，都不利于研发团队成员高效、专注的工作。 我们需要始终记得，最终工作是靠研发同学的努力完成的，作为主管，需要尽最大努力保护好同学们，让其可以专注工作，而不是用低效的各种琐碎事务干扰同学。&lt;/p&gt;

&lt;h1 id=&quot;结语一切回归到人&quot;&gt;结语：一切回归到人&lt;/h1&gt;
&lt;p&gt;对于技术管理这一节，我们从一个团队高效交付价值讲起，分解了三个不同的要素，并分析了技术管理者如何围绕这三个围绕做好自己的贡献。 所有的这些，最终回归到原点还是要回到人的身上。&lt;/p&gt;

&lt;p&gt;首先，&lt;strong&gt;管理者需要为所带领的研发团队的效率负责&lt;/strong&gt;。 管理者需要明确意识到自己的这一核心职责。&lt;/p&gt;

&lt;p&gt;其次，作为技术公司，我们的技术发展，技术对业务的帮助，这一切根源&lt;strong&gt;都是因为我们吸引了优秀的人才，并且这些人才在公司蓬勃发展&lt;/strong&gt;。有了这个共识，才有技术管理的变化和激活组织的思想基础。&lt;/p&gt;

&lt;h1 id=&quot;实践参考&quot;&gt;实践参考&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Grow model for coaching and mentoring &lt;a href=&quot;https://www.mindtools.com/pages/article/newLDR_89.htm&quot;&gt;https://www.mindtools.com/pages/article/newLDR_89.htm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;技术负责人管理办法样例（TRE）：&lt;a href=&quot;https://yuque.antfin.com/docs/share/061389e8-d7d3-4bec-bff6-14547ebb2d70&quot;&gt;https://yuque.antfin.com/docs/share/061389e8-d7d3-4bec-bff6-14547ebb2d70&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;P/M 双通道管理 TODO 待补充文档链接&lt;/li&gt;
  &lt;li&gt;扩展阅读：了解员工驱动力。 RSA what motivated us https://youtu.be/u6XAPnuFjJc&lt;/li&gt;
&lt;/ol&gt;

</description>
      </item>
    
      <item>
        <title>如何做好代码评审</title>
        <link>http://localhost:4000/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E4%BB%A3%E7%A0%81%E8%AF%84%E5%AE%A1</link>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0800</pubDate>
        <author></author>
        <description>&lt;p&gt;&lt;img src=&quot;/public/images/code_review/code_review.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p align=&quot;right&quot;&gt; “三人行，必有我师焉；择其善者而从之，其不善者而改之” &lt;/p&gt;

  &lt;p align=&quot;right&quot;&gt;《论语》 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;相信任何对技术有追求的工程师都希望提高自己的编码水平，任何团队都希望产品代码能具有统一风格，代码就像是出自同一人之手，降低认知负荷。&lt;/p&gt;

&lt;p&gt;很多团队也都探索过 Code Review 实践，最终却不幸流于形式，虎头蛇尾，造成这种现象的原因是多方面的，团队文化、奖励机制、成本和收益不对等等问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;缺乏 Code Review 文化，没有形成代码评审的统一认知，破窗效应&lt;/li&gt;
  &lt;li&gt;管理者对 Code Review 的关注度不够&lt;/li&gt;
  &lt;li&gt;在评审过程中不知道该关注什么，感受不到 Code Review 带来的收益&lt;/li&gt;
  &lt;li&gt;缺乏 Code Review 最佳实践，导致成本高，在摸索过程中逐渐失去耐心&lt;/li&gt;
  &lt;li&gt;产品业务赶工期，来不及做 Code Review&lt;/li&gt;
  &lt;li&gt;对 Code Review 工具熟悉程度不够&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-为什么代码评审很重要&quot;&gt;1. 为什么代码评审很重要&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;工程师成长的最佳场景&lt;/strong&gt;：工程师之间通过 Code Review 对代码设计、实现、规范相关的讨论和交流，是相互学习和成长的最佳场景。软件工程能力只有从代码实践中学到，坚持高标准 Code Review，是团队工程能力提高的必要条件。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;尽早发现 Bug 和设计中存在的问题&lt;/strong&gt;：问题发现得越早，修复的代价越小， Code Review 就是把问题的发现尽量提前。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;团队知识共享&lt;/strong&gt;：代码入库之后，就从个人的代码变成了团队的代码， Code Review 可以帮助其他开发者了解这些代码的设计思想、实现方式，另外， Code Review 的讨论记录、标题、描述信息可以作为参考文档，帮助他人理解代码、追溯逻辑、查找问题。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;针对某个特定方面提高质量&lt;/strong&gt;：针对比较专业的领域，如安全、性能、UI 等，可以邀请专家进行专项审查，另外，复杂场景和高风险代码，也可以通过团队集思广益、查缺补漏的方式来降低上线风险。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;统一编码风格&lt;/strong&gt;：这也是 Code Review 的常见场景，但最好能通过工具，如 Style 插件/P3C 扫描等配置自动化任务来实现机器审查。进行 Code Review ，最好不要过度消耗在风格的检查上。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;引导开发者编程心态&lt;/strong&gt;：如果在编程过程中就知道一定会有同事将检查你的代码，那么你编程心态就会完全不同，会自然而然的更加注重代码质量。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-把-code-review-作为一种制度&quot;&gt;2. &lt;strong&gt;把 Code Review 作为一种制度&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;21-发布流水线上配置卡点&quot;&gt;2.1 发布流水线上配置卡点&lt;/h2&gt;
&lt;p&gt;在发布流程中，设置 Code Review 卡点， CR 不通过不允许发布&lt;/p&gt;

&lt;h2 id=&quot;22-代码入库前强制评审&quot;&gt;2.2 代码入库前强制评审&lt;/h2&gt;
&lt;p&gt;如果代码仓库并不利用发布平台进行发布后入库，同时也希望能开发代码入库前的 Code Review 检查，可以在代码平台上开启开关来进行强制入库检查。之后可以通过在本地客户端发起代码评审，可以保证任何 Commit 在入库之前都经过了评审。这种方式可以像提交一个普通分支一样提交评审。&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HEAD:refs/for/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;分支名&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;feat: add xxx config&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reviewer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-形成-code-review-文化&quot;&gt;3. 形成 Code Review 文化&lt;/h1&gt;
&lt;p&gt;把 Code Review 作为上线发布流程或者代码入库的卡点并不代表 Code Review 这件事就可以执行的很好。如果仅仅只是当作一个流程制度，那么就可能会流于形式，最终结果就是看起来做了 Code Review ，但没有人认真审查，随便看下就通过了，或者发现问题也不愿意修改。&lt;/p&gt;

&lt;p&gt;要想把 Code Review 这件事做好，必须让 Code Review 变成团队的一种文化，开发人员从心底接受这件事，并认真执行，否则如果只有部分同学认同容易形成破窗效应，久而久之，Code Review 就无法真正执行下去，下列这些方面可以参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;开发人员认识到 Code Review 这件事为自己、为团队带来的好处，形成统一的共识比强制执行要事半功倍&lt;/li&gt;
  &lt;li&gt;充分发挥技术带头人和架构师的带头作用，做好表率，榜样的力量很重要&lt;/li&gt;
  &lt;li&gt;对于管理者/架构师/评审人来说，对认真完成 Code Review 的同学以及好的 Code Review 代码实现，不要吝啬自己的赞美，可以通过给 Code Review 点赞和评论等方式给予积极回应&lt;/li&gt;
  &lt;li&gt;把 Code Review 要作为开发任务的一部分，甚至面向 Code Review 编程，一旦面向 Code Review 编程，代码需要经过别人的审核才能入库，你自然而然在意代码质量&lt;/li&gt;
  &lt;li&gt;把 Code Review 当做团队核心的数据资产，也把 Code Review 当做技术人的名片&lt;/li&gt;
  &lt;li&gt;将 Code Review 同步给团队内更多的同学，代码平台支持邮件组通知功能，申请一个公共邮件组，将团队 Leader/架构师等角色组织起来，可以起到很好的监督督促作用&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-提高评审效率和评审质量的实践&quot;&gt;4. 提高评审效率和评审质量的实践&lt;/h1&gt;
&lt;p&gt;Code Review 的执行，很大部分程度上依赖于评审人的认真审查，以及被评审人的积极配合，两者缺一不可。但即使是团队已经初步形成了评审文化，但如果评审的成本过高，也会极大的打击评审人和被评审人的积极性，所以必须对 Code Review 进行行为规范来最大程度的降低 Code Review 时间成本，提升评审人和被评审人的沟通效率。这一章节会介绍不同角色对应的 Code Review 规范。&lt;/p&gt;

&lt;h2 id=&quot;41-作为作者&quot;&gt;4.1 作为作者&lt;/h2&gt;

&lt;h3 id=&quot;411-确保-code-review-只做一件事&quot;&gt;4.1.1 确保 Code Review 只做一件事&lt;/h3&gt;
&lt;p&gt;保持单一职责原则可以有效避免 Code Review 成本过高。一个 Code Review 应该只负责一件事，处理了一个 Feature，解决了一个 Bug，新增一个组件或功能。&lt;/p&gt;

&lt;p&gt;单一职责会让 Code Review 理解成本最小，不要为了省事在一个 Code Review 里掺杂太多其它修改，所以下列行为是不推荐的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在处理需求时觉得的与本需求毫无关联的变量命名写的不好，顺手修改&lt;/li&gt;
  &lt;li&gt;在处理需求时觉得某个与本需求毫无关联的 Method 设计的不优雅，顺手重构&lt;/li&gt;
  &lt;li&gt;在处理需求时发现之前的代码格式不规范，顺手格式化整个文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些行为都是在增加评审成本，应该新起一个独立的 Code Review 来完成，而不是在本次 Code Review 中做。Code Review 的规模和范围并不以代码修改规模来作为唯一评判标准，也要判断该 Code Review 是不是只在做一件事。另外，如果 Code Review 是为了实现代码清理和代码格式化等优化，也不要夹带私货，避免引入 Bugfix 和 Feature。&lt;/p&gt;

&lt;h3 id=&quot;412-发起-code-review-的时机尽量提前开发中小步快跑&quot;&gt;4.1.2 发起 Code Review 的时机：尽量提前，开发中小步快跑&lt;/h3&gt;
&lt;p&gt;避免发起临门一脚的 Code Review，临门一脚指的是快接近发布上线时间才发起的 Code Review，开发代码都是为了发布上线，有一些需求会有发布上线的时间点限制，但发起临门一脚的 Code Review 会显著的将 Code Review 推向流于形式的方向。根据经验，Code Review 越左移，修改代码的成本越低，修改意愿也越高，什么是左移？先了解一下常规的发布上线流水线流程，有两种发起 Code Review 的时机，从 CR 实践落地效果上看，第一种 CR 发起的时机更好&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;时机 1：和 CI 并行的 Code Review 
&lt;img src=&quot;/public/images/code_review/cr01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;时机 2：在上线发布之前发起 Code Review 
&lt;img src=&quot;/public/images/code_review/cr01-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从流水线上来看，许多人会在临近上线时，在靠右的地方快合并主分支的时候才进行 Code Review ，这个时候修改成本就很高，因为代码已经自测/测试通过，如果因为 Code Review 有问题需要重新修改代码，功能本身又要自测或者回归测试，占用更多的时间。而且因为已经临近上线，却因为 Code Review 被打回，开发人员愿意重构代码的意愿也会很低，明明发现问题，又因为上线压力，不打回不符合规范的代码，久而久之大家会失去对 Code Review 的敬畏心理， Code Review 也会慢慢流于形式变成应用发布的过场之一，既无法提高代码质量，降低系统 Bug，也不能提升开发人员的水平，反而降低的开发团队的效率，所以我们要尽量避免在上线之前才发起评审，最好的评审发起时机应该是在开发完毕后立即提交代码评审。但也有一些复杂场景需要反复进行测试和验证，对于这类 Case 也可以在 CI 流程完毕后再发起。&lt;/p&gt;

&lt;h3 id=&quot;413-尽可能提前做好代码自审&quot;&gt;4.1.3 尽可能提前做好代码自审&lt;/h3&gt;

&lt;p&gt;在提交Code Review之前可以借助工具进行一次查缺补漏，避免将低级错误和不完善的代码展现给评审人。例如借助代码平台的新建评审页面展示提交内容，查缺补漏。&lt;/p&gt;

&lt;h3 id=&quot;414-编写语义明确的标题&quot;&gt;4.1.4 编写语义明确的标题&lt;/h3&gt;
&lt;p&gt;不论是 Code Review详情页，还是列表页面，标题都是评审者最先接触到的信息。&lt;/p&gt;

&lt;p&gt;如下图，从评审列表无法判断 Code Review 所完成的事项，是否是在处理 Feature 还是 Bug，也无法判断紧急程度和优先级。&lt;/p&gt;

&lt;p&gt;推荐使用如下格式来规范标题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;修复线上 bug&lt;/strong&gt;：fix(模块)：标题&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;修复线上紧急 bug&lt;/strong&gt;：紧急 fix(模块)：标题&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;上线新的 feature&lt;/strong&gt;：feature(模块)：标题也有团队使用 feat 来表示 feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;模块可以是每个平台约定俗成的模块，比如代码平台的模块包括：Code Search、 Code Review 、Issues、Wiki 等，从评审列表就可以获知大部分信息，当前 Code Review 在解决什么模块的什么问题，也可以根据前缀大概判断紧急程度。规范之后从列表对 Code Review 的意图一目了然，Code Review 也是团队的重要数据资产，通过规范的标题可以对模块的发展脉络进行方便检索。&lt;/p&gt;

&lt;h3 id=&quot;415-编写详细的描述&quot;&gt;4.1.5 编写详细的描述&lt;/h3&gt;
&lt;p&gt;Code Review 的描述也是最重要的信息输入之一，是 Code Review 发起人和代码评审人之间的对话，发起人有义务将自己的编码逻辑、修改范围、可能影响介绍给评审人。评审人在阅读代码之前就了解你的背景和思路，比阅读代码过程中再逐步领悟效率要高得多。评审人也有权利拒绝评审无任何描述信息的 Code Review。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;详细的描述信息能大大降低评审人对你的代码编写逻辑理解成本&lt;/li&gt;
  &lt;li&gt;在编辑描述信息的同时也可以对自己的代码逻辑做进一步的梳理，查缺补漏&lt;/li&gt;
  &lt;li&gt;描述信息也是在代码发布上线后追溯代码修改逻辑的一种重要手段&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;描述部分建议提供以下信息：&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;背景：本次修改的原因是什么&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;思路和改动点：大概的思路是什么，改动了哪些方面可能造成的影响介绍一下&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;416-开发过程中的code-review可以使用-wip-前缀来标注&quot;&gt;4.1.6 开发过程中的Code Review可以使用 WIP 前缀来标注&lt;/h3&gt;
&lt;p&gt;WIP：work in progress&lt;br /&gt;评审人在注意到 WIP 开头的 Code Review  时可以暂时忽略&lt;/p&gt;

&lt;p&gt;我们并不能保证每次评审发起后都是一个完整功能或者 fix，例如在发起评审后突然意识到有设计缺陷，或者意识到提交的代码缺少了 UT 覆盖等问题，评审人在不知情的情况下可能随时对你的代码进行评审，为了避免评审人将时间浪费在还未完成开发的 Code Review 上，创建人有义务将标题改成 WIP 前缀，Code 平台会限制这种 Code Review  的合并行为，评审人可以忽略这种评审。&lt;/p&gt;

&lt;h3 id=&quot;417--解决所有-checklist&quot;&gt;4.1.7  解决所有 CheckList&lt;/h3&gt;
&lt;p&gt;每个评审创建人都要对自己的 Code Review  负责，确保 Code Review 达到最终可合并状态，这里的可合并状态并不是有人通过即可，还包括测试用例的状态，Trybots 的状态，评论的状态。 Code Review  会在突出位置展示当前未完成的任务。&lt;/p&gt;

&lt;p&gt;作者需要确保 Code Review 的 Checklist 全部解决，其中包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确保评审人通过评审&lt;/li&gt;
  &lt;li&gt;解决评论全部解决&lt;/li&gt;
  &lt;li&gt;确保测试卡点任务全部通过&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;418-尊重评审人的评论&quot;&gt;4.1.8 尊重评审人的评论&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;尊重评审人的劳动&lt;/strong&gt;，针对评审人提出建议或者反馈的评论，请给出适当的回应，虽然  Code Review  平台允许创建人将评论置为已解决，但不进行任何回复是不恰当的。&lt;br /&gt;&lt;strong&gt;保持谦逊&lt;/strong&gt;，任何人的代码都可能有改进的空间，哪怕你是这个领域的专家，提交的代码都有可能出现错误，承认不完美才是专业的表现。&lt;/p&gt;

&lt;h3 id=&quot;419-利用格式化扫描插件来实现风格统一&quot;&gt;4.1.9 利用格式化扫描插件来实现风格统一&lt;/h3&gt;
&lt;p&gt;尽管希望借助Code Review来实现代码仓库的风格统一，但将宝贵的精力用于敦促代码风格统一上是得不偿失的，各团队技术负责人配置自动化扫描插件来完成，例如Eslint、P3C、SpotLess。并配置Aone实验室任务、配置CR卡点等。&lt;/p&gt;

&lt;p&gt;针对 Java 语法就有一些常见的风格扫描插件，例如：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;谷歌的 SpotLess ，&lt;a href=&quot;https://github.com/diffplug/spotless&quot;&gt;SpotLess——让你的代码一尘不染&lt;/a&gt;，这个插件不仅可以扫描代码风格，还能帮助格式化代码&lt;/li&gt;
  &lt;li&gt;P3C 代码规约，&lt;a href=&quot;https://1994.github.io/p3c/&quot;&gt;P3C Java 规约扫描&lt;/a&gt; 在 CR 时可以进行扫描格式化&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;42-作为评审人的最佳实践&quot;&gt;4.2 作为评审人的最佳实践&lt;/h2&gt;

&lt;h3 id=&quot;421-尽快评审&quot;&gt;4.2.1 尽快评审&lt;/h3&gt;
&lt;p&gt;把评审代码作为工作的一部分，和开发者尽快发起评审的原则一样，评审人需要留出足够的时间尽快完成评审。越早发现问题，修改代码的成本越低，修改意愿也越高。如果当前没有时间评审，也要明确告诉评审人会在什么时间点前完成，甚至将评审工作转交给其它同事完成。&lt;/p&gt;

&lt;h3 id=&quot;422-对逻辑和质量进行评审&quot;&gt;4.2.2 对逻辑和质量进行评审&lt;/h3&gt;

&lt;h4 id=&quot;4221-实现逻辑&quot;&gt;4.2.2.1 实现逻辑&lt;/h4&gt;

&lt;p&gt;Code Review 应该着重对业务逻辑进行检查&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;逻辑问题&lt;/strong&gt;：是否有未考虑到全局的设计或现有的某些业务细节，边界条件是否考虑充分等&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;安全问题&lt;/strong&gt;：是否存在安全隐患，例如是否存在 SQL 注入、CSRF、越权等安全漏洞&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;性能问题&lt;/strong&gt;：是否会产生性能上的损害，例如慢 SQL、热点 key、数据倾斜等性能问题&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;线上风险&lt;/strong&gt;：是否会对稳定性产生潜在影响，例如是否产生死锁、死循环、FullGC、OOM 等&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;未知影响&lt;/strong&gt;：是否对体验产生潜在影响，例如某 Feature 的上线会潜在影响了其它功能的表现等&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;测试用例&lt;/strong&gt;：是否有有效的单元测试用例验证逻辑，测试用例的分支覆盖度和代码行覆盖等&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4222-代码质量&quot;&gt;4.2.2.2 代码质量&lt;/h4&gt;
&lt;p&gt;提升代码质量是Code Review的重要目的，Code Review 可以对代码风格、规范、可维护性等进行检查。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;编码规范&lt;/strong&gt;： Code Review 的目的之一是协同，是希望整个团队的代码编写能像出自一人之手&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可读性&lt;/strong&gt;： Code Review  是一个很好的测验代码可读性的手段，避免使用奇淫巧技，避免过度拆分&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可维护性&lt;/strong&gt;：代码的可维护性是由很多因素协同作用的结果，代码的可读性好、简洁、可扩展性好，就会使得代码易维护&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;重复度&lt;/strong&gt;：遵守 Don’t Repeat Yourself 原则，尽量减少重复代码的编写，复用已有的代码&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可测性&lt;/strong&gt;：代码可测试性的好坏，同样可以反应代码质量的好坏，代码的可测试性差难以编写单元测试用例&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但这部分审查不应该作为评审重点，产品或者技术负责人应当选择合适的扫描插件并配置合适的扫描任务来完成扫描和准入。&lt;/p&gt;

&lt;h3 id=&quot;423-针对代码而不是作者&quot;&gt;4.2.3 针对代码，而不是作者&lt;/h3&gt;
&lt;p&gt;Code Review 针对的是代码而非作者，尽量不要指责代码作者的行为和态度，同时也需要能够接受不同的方案，任何问题总有很多不同的方案，你有的只是你个人倾向的方案，但别人的方案可能同样没有问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于需要共同遵守的开发规范和一些设计问题，比如代码规约等一定要指出来给予改进&lt;/li&gt;
  &lt;li&gt;对于最佳实践，可以视情况而定，如果是团队已经认可的统一的最佳实践需要明确指出推动改进&lt;/li&gt;
  &lt;li&gt;对于个人风格偏好，可以适当做出一些妥协，比如有的同学习惯把函数拆分的非常小，有的同学就没有这样的习惯，只要不是影响代码理解，这都只是个人习惯，不要做过多争论&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;424-避免过度追求完美&quot;&gt;4.2.4 避免过度追求完美&lt;/h3&gt;
&lt;p&gt;避免苛求每一行的代码都是完美的，避免以找问题的心态进行 Code Review，要抓住 Code Review 的关注重点反馈，另外，并非一定要找到问题才证明你在认真评审，若针对作者的每一行代码评审，很可能会惹恼到作者，也影响到他们对你的反馈的接受。&lt;/p&gt;

&lt;h3 id=&quot;425-不要吝啬自己的赞美&quot;&gt;4.2.5 不要吝啬自己的赞美&lt;/h3&gt;
&lt;p&gt;毫不吝啬的正向反馈也有助于 Code Review 的实践落地，在日常 CR 中，通常的反馈都是问题或建议，鲜有称赞，但代码评审的目的不应该仅仅是发现错误和问题，还应该鼓励和指导开发人员所完成的出色工作。可以通过分享、点赞等方式等来评价。&lt;/p&gt;

&lt;h3 id=&quot;426-明确评论是否要解决&quot;&gt;4.2.6 明确评论是否要解决&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;评审人在发起评论时需要明确指出该评论是否需要被解决&lt;/strong&gt;，代码平台支持评论标签，支持标注评论是否需要被解决，被标注为不需要解决的纯讨论性评论不会被计入 Check List。对于代码修改建议，需要给出明确的论据或者示例。&lt;/p&gt;

&lt;p&gt;另外可以利用标题的描述对 Review 的评论进行分级，告诉开发者应该如何处理这个评论，例如给评论增加Optional前缀。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[optional]：在评论前面加上一个 [optional] 标记，表示这个代码行的问题可改可不改&lt;/li&gt;
  &lt;li&gt;[optional]：对这个逻辑太复杂的函数进行拆分&lt;/li&gt;
  &lt;li&gt;[optional]：函数的参数太多，建议进行对参数进行封装避免出错&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;427-避免使用反问句来评价&quot;&gt;4.2.7 避免使用反问句来评价&lt;/h3&gt;
&lt;p&gt;避免使用反问句来质疑代码逻辑，通常来说当你 Code Review 代码时保持礼貌和尊重能使开发人员更加清晰，得到更多帮助。也要避免用负面词汇来评价代码。&lt;/p&gt;

&lt;p&gt;🙅🏻‍♀️ 不好的例子: “Catch 异常都不精确的？直接一把抓的？那怎么区分出不同的异常呢？”&lt;/p&gt;

&lt;p&gt;👌 好的例子: “我并没有发现这个并发模块给程序带来了多少帮助，并且还增加了程序的复杂性，因此我认为这段代码最好是用单线程而不是多线程。&lt;/p&gt;

&lt;h1 id=&quot;5-小结&quot;&gt;5. 小结&lt;/h1&gt;
&lt;p&gt;想要推动 Code Review 在团队中更好地实施，很重要的一点便是增强团队成员对 Code Review 的认同感。 如果团队成员不认可 Code Review，即使强制设置了 Code Review 流程，也是形同虚设，反而影响正常开发流程的效率。相反的，如果团队同学都认可“ Code Review 是提升代码质量、提升研发效率的核心手段”，那么团队成员的主观能动性会越来越高，互相学习的氛围越来越浓，帮助别人的同时，也能有效提升自己的代码能力。Code Review 的价值得以最大化，最终实现整体提升研发效率提升。&lt;/p&gt;

&lt;h1 id=&quot;资料引用&quot;&gt;资料引用&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://phauer.com/2018/code-review-guidelines/?spm=ata.21736010.0.0.21977536LqogJB#code-reviews-guidelines-for-the-reviewer&quot;&gt;https://phauer.com/2018/code-review-guidelines/?spm=ata.21736010.0.0.21977536LqogJB#code-reviews-guidelines-for-the-reviewer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Google Code Review 规范：&lt;a href=&quot;https://google.github.io/eng-practices/review/&quot;&gt;https://google.github.io/eng-practices/review/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coolshell.cn/articles/1302.html&quot;&gt;CODE REVIEW中的几个提示&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      </item>
    
      <item>
        <title>如何写好软件设计文档</title>
        <link>http://localhost:4000/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3</link>
        <pubDate>Wed, 21 Oct 2020 00:00:00 +0800</pubDate>
        <author></author>
        <description>&lt;p&gt;&lt;img src=&quot;/public/images/2020-10-21/design-doc.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现代软件工程的全过程，有两个阶段非常关键：一个是 “产品设计”，一个是 “架构设计”。&lt;strong&gt;产品设计由产品经理主导，关注的是 “如何以产品特性来系统化地满足用户需求”&lt;/strong&gt;。&lt;strong&gt;架构设计由架构师主导，关注的是 “业务系统如何系统化地进行分解与交付”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;“设计” 一词非常精妙。无论是 “产品设计”，还是 “架构设计”，其实谈的都是 “需求如何被满足” 这件事情的共识。&lt;/p&gt;

&lt;p&gt;产品经理与架构师是一体两面，对人的能力要求的确会比较像，但是分工不同，关注的维度不同。&lt;strong&gt;产品经理关注的维度，其关键词是：用户需求、技术赋能、商业成功&lt;/strong&gt;。而&lt;strong&gt;架构师关注的维度，其关键词是：用户需求、技术实现、业务迭代&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;本质上所有 “设计文档” 的内容组织逻辑，都应该是相通的。它们的内容大体如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 现状 ：我们在哪里，现状是什么样的？
2. 需求：我们的问题或诉求是什么，要做何改进？
3. 需求满足方式：

    1. 要做成什么样，交付物规格，或者说使用界面（接口）是什么？
    2. 怎么做到？交付物的实现原理。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设计文档要素的关键在于以下几点。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 现状：不要长篇累牍。现状更多的是陈述与我们要做的改变相关的重要事实，侧重于**强调这些事实的存在性和重要性**。
2. 需求：同样不需要长篇累牍。痛点只要够痛，大家都知道，所以**需求陈述是对痛点和改进方向的一次共识确认**。
3. 需求满足方式：要详写，**把我们的设计方案谈清楚**。具体来说，它包括 “交付物规格” 和 “实现原理” 两个方面。
4. 交付物规格，**或者说使用界面，体现的是别人要怎么使用我**。对于 “产品设计”，交付物规格可能是 “产品原型”。对于 “架构设计”，交付物规格可能是 “网络 API 协议” 或者 “包（package）导出的公开类或函数”。
5. 实现原理，谈的是我们是怎么做到的。对于 “产品设计”，它谈的是用户需求对应的 UserStory 设计，也就是业务流具体是怎么完成的。而对于 “架构设计”，它谈的是 UserStory 具体如何被我们的程序逻辑所实现。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;程序 = 数据结构 + 算法&lt;/p&gt;

&lt;p&gt;它是一个很好的指导思想。当我们谈程序实现逻辑时，我们总是从数据结构和算法两个维度去描述它。其中，“数据结构” 可以是内存数据结构，也可以是外存数据结构，还可以是数据库的 “表结构”。“算法” 基于 “数据结构”，它描述的是 UserStory 的具体实现，它可以是 UML 时序图（Sequence Diagram），也可以是伪代码（Pseudo Code）&lt;/p&gt;

&lt;h2 id=&quot;多个设计方案的对比&quot;&gt;多个设计方案的对比&lt;/h2&gt;

&lt;p&gt;一篇设计文档有时候不是只有一个设计方案，而是有多个可能的需求实现方式。在这个时候，通常我们会概要地描述清楚两个设计方案的本质差别，并且从如下这些维度进行对比：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 方案的易实施性与可维护性。
2. 方案的时间复杂度与空间复杂度。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这是因为 “设计” 是软件工程中的头等大事，我们应该在这里 “多浪费点时间”，这样的 “浪费” 最终会得到十倍甚至百倍以上的回报&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;使用界面接口&quot;&gt;使用界面（接口）&lt;/h2&gt;

&lt;p&gt;对于 “模块的详细设计” 来说，规格描述相对简单。因为我们关注的面只是模块本身，而非模块之间的关系。&lt;strong&gt;对于模块本身，我们核心关注点是以下两点：一是接口是否足够简单，是否自然体现业务需求。二是尽可能避免进行接口变更，接口要向前兼容&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于 “系统的概要设计” 来说，我们第一关心的是模块关系，第二关心的才是各个模块的核心接口&lt;/strong&gt;。这些接口能够把系统的关键 UserStory 都串起来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于 UserStory 业务流程的表达来说，UML 时序图通常是更好的表达方式&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;怎么表达模块关系呢？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一个方法是对模块的调用接口进行分类，一个模块对外提供的访问接口无非是：常规 DOM API，即正常的模块功能调用；事件（Event）的发送与监听；插件（Plugin）的注册。&lt;/li&gt;
  &lt;li&gt;另一个表达模块关系的视角，是从架构分解看，我们把系统看作 “一个最小化的核心系统 + 多个彼此正交分解的周边系统”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;需要清楚的是，模块关系图的表达是非常粗糙的，虽然它有助于我们理解系统分解的逻辑。&lt;strong&gt;为了共识的精确，我们仍然需要将各个模块核心的使用界面（接口）表达出来&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;实现原理&quot;&gt;实现原理&lt;/h2&gt;

&lt;p&gt;对于模块的详细设计来说，需要先交代清楚 “数据结构” 是什么样的，然后再将一个个 UserStory 的业务流程讲清楚。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对于系统的概要设计来说，核心是交代清楚不同模块的配合关系&lt;/strong&gt;，所以无需交代数据结构，只需要把一个个 UserStory 的业务流程讲清楚。&lt;/p&gt;

&lt;p&gt;无论是否要画 UML 时序图，在表达上伪代码（Pseudo Code）的设计都是必需的。&lt;strong&gt;伪代码的表达方式及语义需要在团队内形成默契&lt;/strong&gt;。这种伪代码的语义表达必须是精确的。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;请求&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;返回&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以使用 API 来表达&lt;/p&gt;

&lt;h2 id=&quot;qa&quot;&gt;Qa&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;彼此正交就是相互没有直接联系，就算有相互作用也是通过核心系统的接口进行。这里面难点是最小单位的核心系统，需要足够通用的接口方法来保证&lt;/strong&gt;。&lt;/p&gt;
</description>
      </item>
    

  </channel>
</rss>
